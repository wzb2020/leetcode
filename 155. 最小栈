typedef struct {
    int stack[10000];
    int len;
    int minNumber;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() {
    MinStack *newStack = (MinStack*)malloc(sizeof(MinStack));
    if(!newStack) return NULL;
    newStack->len = 0;
    newStack->minNumber = INT_MAX; 
    return newStack;
}

void minStackPush(MinStack* obj, int x) {
    obj->stack[obj->len] = x;
    (obj->len)++;
    if(x<obj->minNumber)
        obj->minNumber = x;
}

void minStackPop(MinStack* obj) {
    if(obj->len <= 0) {
        obj->minNumber = INT_MAX;
        return;
    }
    obj->len--;
    obj->minNumber = INT_MAX;
    for(int i = 0; i < obj->len; i++){
        if(obj->minNumber > obj->stack[i])
            obj->minNumber = obj->stack[i];
    }
}

int minStackTop(MinStack* obj) {
    return obj->stack[obj->len - 1];
}

int minStackGetMin(MinStack* obj) {
    return obj->minNumber;
}

void minStackFree(MinStack* obj) {
    free(obj);
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/